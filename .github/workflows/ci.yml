# .github/workflows/ci.yml

name: CI/CD Pipeline - Application Bibliothèque

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # --- Job 1: Construire, Tester, Scanner, Pousser les images ---
  build-test-scan-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Pour pousser vers GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with Flake8
        working-directory: ./backend
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata backend
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/backend

      - name: Extract Docker metadata frontend
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/frontend

      - name: Build and Push Backend Docker image
        id: build_backend # Ajout d'un ID pour référencer l'étape
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          load: true # Nécessaire pour le scan Trivy
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Frontend Docker image
        id: build_frontend # Ajout d'un ID
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          load: true # Nécessaire pour le scan Trivy
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Backend image for vulnerabilities
        if: always() # S'exécute même si le push est skippé (PR)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta_backend.outputs.tags }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Scan Frontend image for vulnerabilities
        if: always() # S'exécute même si le push est skippé (PR)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta_frontend.outputs.tags }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

  # --- Job 2: Déployer sur Kubernetes ---
  deploy-k8s:
    # Ne lancer ce job que si le job précédent a réussi
    needs: build-test-scan-push
    # Ne lancer ce job que sur un push vers la branche main (pas sur les PR)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      # Récupérer le code (nécessaire pour accéder aux manifestes)
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Configuration de kubectl ---
      # (Optionnel - Si tu déployais sur un vrai cluster cloud,
      # tu ajouterais ici les étapes pour configurer l'accès:
      # ex: actions/setup-gcloud, aws-actions/configure-aws-credentials, azure/login, etc.)
      # - name: Set up Kubeconfig for Cloud Cluster
      #   uses: <action-specifique-cloud>
      #   with:
      #     # ... configuration ...
      #     credentials: ${{ secrets.KUBE_CONFIG_DATA }} # Exemple

      # --- Étape de Déploiement (Simulée pour cluster local) ---
      # Cette étape montre comment on appliquerait les manifestes.
      # Elle échouerait si elle cible un cluster local non accessible.
      - name: Deploy to Kubernetes (Apply manifests)
        run: |
          echo "Attempting to apply Kubernetes manifests..."
          # Dans un vrai scénario avec un cluster accessible, cette commande fonctionnerait.
          # Pour une démo, on peut juste afficher la commande ou utiliser --dry-run=client
          # kubectl apply -f kubernetes/ --dry-run=client # Vérifie la syntaxe sans appliquer
          kubectl apply -f kubernetes/
          echo "kubectl apply command executed (may fail if cluster is not accessible)."

